from flask import render_template, request, flash, session, redirect, url_for
from stations.query import bp
from stations.auth.routes import login_required
from stations.extensions import cache
import requests
import json
from xml.etree import ElementTree as ET

# ------------------
# Model request management
# Routes for jobs *metimod()
# ------------------


@bp.route('/modmeti', methods=('GET', 'POST'))
@login_required
def metimod():

	joblist = []
	if request.method == 'POST':
		letters = request.form['startjob']
		if len(letters) == 0:
			listmeti = """
			PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
			PREFIX schema: <http://schema.org/>
			SELECT ?nomMetier ?Id WHERE {
				?Id a schema:Occupation ;
				rdfs:label ?nomMetier .
			}
			ORDER BY REPLACE(LCASE(str(?nomMetier)),"é","e")
			"""
		else:
			listmeti = """
			PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
			PREFIX schema: <http://schema.org/>
			SELECT ?nomMetier ?Id WHERE {
				?Id a schema:Occupation ;
				rdfs:label ?nomMetier .
				FILTER(strStarts( ?nomMetier, '""" + letters + """' ) ) .
			}
			ORDER BY REPLACE(LCASE(str(?nomMetier)),"é","e")
			"""
		session['letters'] = letters

		rawjoblist = requests.post('http://localhost:3030/metiers',
							data={'query': listmeti})
		joblist=json.loads(rawjoblist.text)['results']['bindings']

	
	return render_template('query/models/metiers/modmeti.html', joblist=joblist)


@bp.route('/moddescmeti', methods=('GET', 'POST'))
@login_required
def descmetimod():
	
	global metrdfdb
	
	if request.method == 'POST':
		letters = request.form['startjob']
		session['letters'] = letters
	else:
		letters = session.get('letters', 'acces')
	
	job = request.args['thisJob']
	jobname = request.args['thisJobName']

	
	if len(letters) == 0:
		listmeti = """
		PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		PREFIX schema: <http://schema.org/>
		SELECT ?nomMetier ?Id WHERE {
			?Id a schema:Occupation ;
			rdfs:label ?nomMetier .
		}
		ORDER BY REPLACE(LCASE(str(?nomMetier)),"é","e")
		"""
	else:
		listmeti = """
		PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		PREFIX schema: <http://schema.org/>
		SELECT ?nomMetier ?Id WHERE {
			?Id a schema:Occupation ;
			rdfs:label ?nomMetier .
			FILTER(strStarts( ?nomMetier, '""" + letters + """' ) )
		}
		ORDER BY REPLACE(LCASE(str(?nomMetier)),"é","e")
		"""
	
	descmeti = """
	PREFIX reegle: <http://reegle.info/schema#>
	PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
	PREFIX schema: <http://schema.org/>
	PREFIX trmpfi: <http://tremplin.ens-lyon.fr/rules/>
	PREFIX trmpo: <http://www.onisep.fr/objects/>
	PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
	PREFIX doap: <http://usefulinc.com/ns/doap#>
	PREFIX dcterms: <http://purl.org/dc/terms/>
	PREFIX seo: <https://w3id.org/seo#>
	PREFIX cito: <http://purl.org/spar/cito/>
	SELECT ?nomMetier ?altNames ?secteurs ?niveauAcces  ?accroche
	?shorterDesc ?shortDesc ?metAss ?formations WHERE {
		<""" + job + """> rdfs:label ?nomMetier ;
		seo:Flyer ?accroche .
		OPTIONAL {
			SELECT (group_concat(?metAss;separator=", ") as ?metAsss) WHERE {
				<""" + job + """> cito:linksTo ?linkedJob .
				?linkedJob trmpfi:metAssLabel ?metAss .
			}
		}
		{
			SELECT ?niveauAcces WHERE {
				<""" + job + """> schema:educationalLevel ?niv .
				?niv rdfs:label ?niveauAcces  .
			}
		}
		{
			SELECT ?shorterDesc WHERE {
				<""" + job + """> doap:description ?alldesc .
				?alldesc  dcterms:identifier "FicheMetierDocumentation" ;
				dcterms:description ?shorterDesc .
			}
		}
		{
			SELECT ?shortDesc WHERE {
				<""" + job + """> doap:description ?alldesc .
				?alldesc dcterms:identifier "DicoDesMetiers" ;
				dcterms:description ?shortDesc .
			}
		}
		{
			SELECT (group_concat(?altName;separator=", ") as ?altNames)  WHERE {
				<""" + job + """> schema:alternateName ?altName
			}
		}
		{
			SELECT (group_concat(?sectname;separator=", ") as ?secteurs)  WHERE {
				<""" + job + """> reegle:sector ?secteur .
				?secteur rdfs:label ?sectname .
			}
		}
		{
			SELECT (GROUP_CONCAT(CONCAT(?formation, "->", ?formid); separator=", ") as ?formations) WHERE {
				<""" + job + """> schema:qualifications ?cursus .
				?cursus rdfs:label ?formation ;
				dcterms:identifier ?formid .
			}
		}
	}
	"""
	
	rawjoblist = requests.post('http://localhost:3030/metiers',
							data={'query': listmeti})
	joblist=json.loads(rawjoblist.text)['results']['bindings']
	rawjobdesc = requests.post('http://localhost:3030/metiers',
							data={'query': descmeti})
	jobdesc=json.loads(rawjobdesc.text)['results']['bindings']

	return render_template('query/models/metiers/modmeti+desc.html',
						   job=job,
						   jobname=jobname,
						   joblist=joblist,
						   jobdesc=jobdesc)


# ------------------
# Model request management
# Routes for activity sectors *metimod1()
# ------------------


@bp.route('/mod1meti', methods=('GET', 'POST'))
@login_required
def metimod1():
	
	global metrdfdb
	sectlist = []
	
	if request.method == 'POST':
		sletters = request.form['startsect']
		
		if len(sletters) == 0:
			listsect = """
			PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
			PREFIX schema: <http://schema.org/>
			PREFIX reegle: <http://reegle.info/schema#>
			PREFIX dcterms: <http://purl.org/dc/terms/>
			SELECT DISTINCT ?secteur ?sectid WHERE {
				?s rdf:type schema:Occupation ;
				reegle:sector ?datasect .
				?datasect rdfs:label ?secteur ;
				dcterms:identifier ?sectid .
			}
			ORDER BY REPLACE(LCASE(str(?secteur)),"é","e")
			"""
		
		else:
			listsect = """
			PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
			PREFIX schema: <http://schema.org/>
			PREFIX reegle: <http://reegle.info/schema#>
			PREFIX dcterms: <http://purl.org/dc/terms/>
			SELECT DISTINCT  ?secteur ?sectid WHERE {
				?s rdf:type schema:Occupation ;
				reegle:sector ?datasect .
				?datasect rdfs:label ?secteur ;
				dcterms:identifier ?sectid .
				FILTER(strStarts( ?secteur, '""" + sletters + """' ) )
			}
			ORDER BY REPLACE(LCASE(str(?secteur)),"é","e")
			"""
		session['sletters'] = sletters

		rawsectlist = requests.post('http://localhost:3030/metiers',
							data={'query': listsect})
		sectlist = json.loads(rawsectlist.text)['results']['bindings']

	return render_template('query/models/metiers/mod1meti.html', sectlist=sectlist)


@bp.route('/mod1descmeti', methods=('GET', 'POST'))
@login_required
def descmetimod1():
	
	global metrdfdb
	
	if request.method == 'POST':
		sletters = request.form['startsect']
		session['sletters'] = sletters
	else:
		sletters = session.get('sletters')
	
	sect = request.args['thisSect']
	sectid = request.args['thisSectId']
	
	if len(sletters) == 0:
		listsect = """
		PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
		PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		PREFIX schema: <http://schema.org/>
		PREFIX reegle: <http://reegle.info/schema#>
		PREFIX dcterms: <http://purl.org/dc/terms/>
		SELECT DISTINCT  ?secteur ?sectid WHERE {
			?s rdf:type schema:Occupation ;
			reegle:sector ?datasect .
			?datasect rdfs:label ?secteur ;
			dcterms:identifier ?sectid .
		}
		ORDER BY REPLACE(LCASE(str(?secteur)),"é","e")
		"""
	else:
		listsect = """
		PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
		PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		PREFIX schema: <http://schema.org/>
		PREFIX reegle: <http://reegle.info/schema#>
		PREFIX dcterms: <http://purl.org/dc/terms/>
		SELECT DISTINCT  ?secteur ?sectid WHERE {
			?s rdf:type schema:Occupation ;
			reegle:sector ?datasect .
			?datasect rdfs:label ?secteur ;
			dcterms:identifier ?sectid .
			FILTER(strStarts( ?secteur, '""" + sletters + """' ) ) .
		}
		ORDER BY REPLACE(LCASE(str(?secteur)),"é","e")
		"""
	
	descsectmeti = """
	PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
	PREFIX reegle: <http://reegle.info/schema#>
	PREFIX doap: <http://usefulinc.com/ns/doap#>
	PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
	PREFIX schema: <http://schema.org/>
	PREFIX trmpfi: <http://tremplin.ens-lyon.fr/rules/>
	PREFIX seo: <https://w3id.org/seo#>
	PREFIX dcterms: <http://purl.org/dc/terms/>
	SELECT ?Id ?nomMetier ?niveauAcces  ?accroche ?shorterDesc WHERE {
		?Id rdf:type schema:Occupation ;
		rdfs:label ?nomMetier ;
		seo:Flyer ?accroche ;
		dcterms:identifier ?idMetier .
		{
			SELECT ?Id ?datasect WHERE {
				?Id reegle:sector ?datasect .
				?datasect dcterms:identifier '""" + sectid + """' .
			}
		}
		{
			SELECT ?Id ?shorterDesc WHERE {
				?Id doap:description ?description .
				?description dcterms:identifier "FicheMetierDocumentation" ;
				dcterms:description ?shorterDesc .
			}
		}
		{
			SELECT ?Id ?niveauAcces WHERE {
				?Id schema:educationalLevel ?niv .
				?niv rdfs:label ?niveauAcces  .
			}
		}
	}
	ORDER BY REPLACE(LCASE(str(?niveauAcces)),"é","e")
	"""

	rawsectlist = requests.post('http://localhost:3030/metiers',
							data={'query': listsect})
	sectlist = json.loads(rawsectlist.text)['results']['bindings']

	rawsectmetidesc = requests.post('http://localhost:3030/metiers',
							data={'query': descsectmeti})
	sectmetidesc = json.loads(rawsectmetidesc.text)['results']['bindings']
	
	return render_template('query/models/metiers/mod1meti+desc.html', sect=sect, sectmetidesc=sectmetidesc,
						   sectlist=sectlist)


# ------------------
# Model request management
# Routes for activity sectors *metimod2()
# ------------------


@bp.route('/mod2meti', methods=('GET', 'POST'))
@login_required
def metimod2():

	listchoices = []
	listlabels = []
	selectjobs = []
	
	if request.method == 'POST':
		listchoices = request.form.getlist('c_int')
		llist = len(listchoices)
		choices = " '" + listchoices[0] + "'"
		
		for i in range(1, llist):
			choices += ", '" + listchoices[i] + "'"

		session['choices'] = choices
		
#		qlabelscint = """
#		PREFIX being: <http://contextus.net/ontology/ontomedia/ext/common/being#>
#		PREFIX dcterms: <http://purl.org/dc/terms/>
#		PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
#		SELECT DISTINCT ?cilabel WHERE {
#			?s being:will-do ?ci .
#			?ci dcterms:identifier ?value ;
#			rdfs:label ?cilabel .
#			FILTER (?value IN (""" + choices + """)) .
#		}
#		"""
#
#		qselectjobs = """
#		PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
#		PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
#		PREFIX being: <http://contextus.net/ontology/ontomedia/ext/common/being#>
#		PREFIX schema: <http://schema.org/>
#		PREFIX dcterms: <http://purl.org/dc/terms/>
#		SELECT DISTINCT ?Metier ?Id ?cinterets ?nbCinterets WHERE {
#			?Id rdf:type schema:Occupation ;
#			rdfs:label ?Metier .
#			{
#				SELECT(group_concat(?cinteret; separator = ", ") as ?cinterets)
#				(COUNT(?cinteret) AS ?nbCinterets) WHERE {
#					?Id being:will-do ?ci .
#					?ci dcterms:identifier ?value ;
#					rdfs:label ?cinteret .
#					FILTER (?value IN (""" + choices + """))
#				}
#			}
#			FILTER(?nbCinterets >= 1)
#		}
#		ORDER BY DESC(?nbCinterets)
#		"""
#
#		rawlistlabels = requests.post('http://localhost:3030/metiers',
#							data={'query':qlabelscint})
#		listlabels = json.loads(rawlistlabels.text)['results']['bindings']
#
#		rawselectjobs = requests.post('http://localhost:3030/metiers',
#							data={'query': qselectjobs})
#		selectjobs = json.loads(rawselectjobs.text)['results']['bindings']



		#return render_template('query/models/metiers/mod2meti+desc.html', listlabels=listlabels, selectjobs=selectjobs)
		return redirect(url_for('query.descmetimod2'))
	
	return render_template('query/models/metiers/mod2meti.html', listchoices=listchoices)


@bp.route('/mod2descmeti', methods=('GET', 'POST'))
@login_required
def descmetimod2():

	choices	= session['choices']
	print(choices)
	qlabelscint = """
	PREFIX being: <http://contextus.net/ontology/ontomedia/ext/common/being#>
	PREFIX dcterms: <http://purl.org/dc/terms/>
	PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
	SELECT DISTINCT ?cilabel WHERE {
		?s being:will-do ?ci .
		?ci dcterms:identifier ?value ;
		rdfs:label ?cilabel .
		FILTER (?value IN (""" + choices + """)) .
	}
	"""
	#
	qselectjobs = """
	PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
	PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
	PREFIX being: <http://contextus.net/ontology/ontomedia/ext/common/being#>
	PREFIX schema: <http://schema.org/>
	PREFIX dcterms: <http://purl.org/dc/terms/>
	SELECT DISTINCT ?Metier ?Id ?cinterets ?nbCinterets WHERE {
		?Id rdf:type schema:Occupation ;
		rdfs:label ?Metier .
		{
			SELECT ?Id (group_concat(?cinteret; separator = ", ") as ?cinterets)
			(COUNT(?cinteret) AS ?nbCinterets) WHERE {
				?Id being:will-do ?ci .
				?ci dcterms:identifier ?value ;
				rdfs:label ?cinteret .
				FILTER (?value IN (""" + choices + """))
			}
			GROUP BY ?Id
		}
		FILTER(?nbCinterets >= 2)
	}
	ORDER BY DESC(?nbCinterets)
	"""

	rawlistlabels = requests.post('http://localhost:3030/metiers',
						data={'query':qlabelscint})
	listlabels = json.loads(rawlistlabels.text)['results']['bindings']
	#
	rawselectjobs = requests.post('http://localhost:3030/metiers',
						data={'query': qselectjobs})
	selectjobs = json.loads(rawselectjobs.text)['results']['bindings']

	return render_template('query/models/metiers/mod2meti+desc.html', listlabels=listlabels, selectjobs=selectjobs)


# ------------------
# Model request management
# Routes for formations *formmod()
# ------------------


@bp.route('/modform', methods=('GET', 'POST'))
@login_required
def formmod():
	error = None
	
	if request.method == 'POST':
		first_param = request.form['param1']
		second_param = request.form['param2']
		
		if error is None:
			
			twoparlist = 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n' + \
						  'PREFIX trmpfi: <http://tremplin.ens-lyon.fr/rules/> \n' + \
						  'SELECT ?' + first_param + ' ?' + second_param + ' WHERE { \n' + \
						  '?' + first_param + ' rdfs:label ?' + second_param + ' . \n' + \
						  '?' + first_param + ' a trmpfi:info . \n' + \
						  '} \n'
			
			#results = forrdfdb.query(first_query)
			
			#return render_template('query/idlabel_request.html', results=results)
		        
			rawparlist = requests.post('http://localhost:3030/formations', 
						   data={'query': twoparlist})                                                                 
			parlist=json.loads(rawparlist.text)['results']['bindings']                                                                        
	else:
		flash('error')
	
	return render_template('query/models/formations/modform.html')


@bp.route('/moddescform', methods=('GET', 'POST'))
@login_required
def descformmod():

	global forrdfdb

	formlink = request.args['formlink']

	descform = """
	PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
	PREFIX wd: <http://www.wikidata.org/entity/>
	PREFIX schema: <http://schema.org/>
	PREFIX trmpo: <http://www.onisep.fr/objects/>
	SELECT ?desc ?educationalLevel ?region ?ville ?etablissement ?duree 
	?scolmod ?enseign ?heberg ?siteweb ?pageweb WHERE { 
		?s schema:relatedLink '""" + formlink + """' ;
		rdfs:label ?desc ;
		schema:educationalLevel ?educationalLevel ;
		schema:AdministrativeArea ?region ;
		schema:City ?ville ;
		schema:provider ?etablissement ;
		schema:timeToComplete ?duree ;
		schema:eventAttendanceMode ?scolmod ;
		schema:teaches ?enseign ;
		schema:Accommodation ?heberg ;
		schema:WebSite ?siteweb ;
		schema:WebPage ?pageweb .
	}
	ORDER BY ?region 
	"""

	rawformdesc = requests.post('http://localhost:3030/formations', data={'query': descform})
	formdesc = json.loads(rawformdesc.text)['results']['bindings']
	formname = formdesc[0]['desc']['value']
	educlevel = formdesc[0]['educationalLevel']['value']
	duration = formdesc[0]['duree']['value']

	return render_template('query/models/formations/modform+desc.html', formdesc=formdesc,
			formname=formname,
						educlevel=educlevel,
						duration=duration)

# ------------------
# Model request management
# Routes for institutions *etabmod()
# ------------------


@bp.route('/modetab', methods=('GET', 'POST'))
@login_required
def etabmod():
	return render_template('query/models/etablissements/modetab.html')


@bp.route('/auto_modelrq', methods=('GET', 'POST'))
@login_required
def auto_modelrq():
	
	first_query = 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n' + \
				  'PREFIX trmpfi: <http://tremplin.ens-lyon.fr/rules/> \n' + \
				  'SELECT ?predicate ?label WHERE { \n' + \
				  '?predicate rdfs:label ?label ; \n' + \
				  '           a trmpfi:info .  \n' + \
				  '} \n'
	
	results = prerdfdb.query(first_query)
	
	return render_template('query/idlabel_request.html', results=results)


# ------------------
# Routes for utils formutil() metiutil(mod) etabutil()
# ------------------

@bp.route('/formutil', methods=('GET', 'POST'))
@login_required
def formutil():
	error = None
	
	if request.method == 'POST':
		first_info = request.form['info1']
		first_filter = request.form['filter1']
		second_info = request.form['info2']
		second_filter = request.form['filter2']
		
		if error is None:
			
			threevarquery = """
			PREFIX schema: <http://schema.org/>
			SELECT DISTINCT ?""" + first_info + """ ?""" + second_info + """ WHERE {
			        ?formation """ + first_filter + """ ?""" + first_info + """ ;
			        """ + second_filter + """ ?""" + second_info + """ .
			}"""
			
			rawtflist = requests.post('http://localhost:3030/formations', data={'query': threevarquery})
			tflist=json.loads(rawtflist.text)['results']['bindings']
			return render_template('query/typformniv_request.html', tflist=tflist) 
	
	else:
		flash('error')
	
	return render_template('query/formutil.html')


@bp.route('/auto_formutilrq', methods=('GET', 'POST'))
@login_required
def auto_formutilrq():
	
	typformquery = """
	PREFIX schema: <http://schema.org/>
	SELECT DISTINCT ?typeDeFormation ?educationalLevel WHERE {
		?formation schema:programType ?typeDeFormation ;
		schema:educationalLevel ?educationalLevel.
	}
	ORDER BY ?educationalLevel
	"""
	
	rawtflist = requests.post('http://localhost:3030/formations', data={'query': typformquery})
	tflist=json.loads(rawtflist.text)['results']['bindings']
	return render_template('query/typformniv_request.html', tflist=tflist)


@bp.route('/metiutil', methods=('GET', 'POST'))
@login_required
def metiutil():
	return render_template('query/metiutil.html')


@bp.route('/etabutil', methods=('GET', 'POST'))
@login_required
def etabutil():
	return render_template('query/etabutil.html')


@bp.route('/onedatastore', methods=('GET', 'POST'))
@login_required
def onedatastore():
	return render_template('query/onedatastore.html')


@bp.route('/twodatastore', methods=('GET', 'POST'))
@login_required
def twodatastore():
	return render_template('query/twodatastore.html')


@bp.route('/threedatastore', methods=('GET', 'POST'))
@login_required
def threedatastore():
	return render_template('query/threedatastore.html')
